<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="iRacingSDK" #>
<#@ import namespace="YamlDotNet.RepresentationModel" #>
<#@ import namespace="System.IO" #>

<# 
	var data = iRacing.GetDataFeed().First();

	var yaml = new YamlStream();
	yaml.Load(new StringReader(data.SessionData.Raw));

	var mapping = (YamlMappingNode)yaml.Documents[0].RootNode;
#>

// This file is part of iRacingSDK.
//
// Copyright 2014 Dean Netherton
// https://github.com/vipoo/iRacingSDK.Net
//
// iRacingSDK is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// iRacingSDK is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with iRacingSDK.  If not, see <http://www.gnu.org/licenses/>.



using System;
using System.Collections.Generic;
using System.Linq;

namespace iRacingSDK
{
    public partial class SessionData
    {
        <# foreach(var kv in mapping)
            Process(kv.Key.ToString(), kv.Value);
        #>
    }
}

<#+
    private void Process(string name, YamlNode node)
    {
        var mappingNode = node as YamlMappingNode;
        var scalarNode = node as YamlScalarNode;
        var sequenceNode = node as YamlSequenceNode;

        if( scalarNode != null )
        {
            long result;
            var isLong = long.TryParse(scalarNode.Value, out result);
            double doubleResult;

            var isDouble = double.TryParse(scalarNode.Value, out doubleResult);

            var type = "string";
            if( isDouble )
                type = "double";
            if( isLong )
                type = "long";

				Console.WriteLine(name);

            if( name == "CarNumber")
                type = "string";

#>          public <#=type #> <#= name #> { get; set; }
<#+
        }
            else if (sequenceNode != null )
        {
#>
            public partial class _<#= name #>
            {
<#+
                var nodes = (YamlMappingNode)sequenceNode.First();
                foreach( var kv in nodes)
                {
                    Process(kv.Key.ToString(), kv.Value);
                }

#>            }

            public _<#= name #>[] <#=name #> { get; set; }
<#+        }
        else if( mappingNode != null )
        {
#>

            public partial class _<#= name #>
            {
<#+            foreach(var kv in mappingNode)
                Process(kv.Key.ToString(), kv.Value);
#>            }

            public _<#= name #> <#= name #>  { get; set; }
<#+
        }
    }
#>